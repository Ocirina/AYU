package nl.codecup.src;

public class Player {
    private GameState state;
    private IPathFinder pathFinder = new AStarPathFinder();
    public static int piece;
    private static int TWENTY_FIVE_SECONDS = 25000;

    public Player(GameState state, int piece) {
        this.state = state;
        Player.piece = piece;
    }

    public GameState takeTurn(GameState state) {
        if (state.isGameOver()) {
            return state;
        }

        this.state = state.clone();
        Move move = chooseMove();
        IO.output(move.toString());
        return state.makeMove(move);
    }

    /**
     * Generate random move, in the future this will be a move which is
     * generated by monte carlo
     * 
     * @return
     */
    public Move chooseMove() {
        Move move = null;

        this.state.recheckGroups();
        // IO.debug("TRY TO FIND MOVE FOR PLAYER: " + Player.piece);
        // IO.debug("AMOUNT OF GROUPS: " + state.getGroupsLength());
        IAlgorithm random = new RandomMoveAlgorithm(state.getGroups(), state.getBoard(), pathFinder);

        if (state.getTimePastInMiliseconds() < TWENTY_FIVE_SECONDS) {
        	if (move == null && state.getGroupsLength() > 15) {
                move = new DirectionAlgorithm(state).getMove();
            }

            if (move == null && state.getGroupsLength() > 10) {
                move = getMonteCarloMove(2, 4, random);
            }

            if (move == null && state.getGroupsLength() > 5) {
                move = getMonteCarloMove(5, 1, random);
            }
        }
        
        if (move == null) {
            move = random.getMove();
        }

        return move;
    }

    private Move getMonteCarloMove(int width, int height, IAlgorithm algorithm) {
        MCTree tree = new MCTree(width, height, state, algorithm);
        return tree.getPlayableMove();
    }

    /**
     * Method to tell caiaio which player ours is
     */
    public String toString() {
        return "R player: " + Player.piece;
    }

    public GameState getState() {
        return this.state;
    }

}
